((/# DATABASE op-set ))
((/# DEFINITION (op-set operator-type symbol). ))
((op-set add-op "+"))
((op-set add-op "-"))
((op-set add-op "or"))
((op-set rel-op ">"))
((op-set rel-op "<"))
((op-set rel-op "="))
((op-set rel-op "<>"))
((op-set rel-op "<="))
((op-set rel-op ">="))
((op-set mul-op "*"))
((op-set mul-op "/"))
((op-set mul-op "and"))
((op-set mul-op "mod"))
((op-set mul-op "div"))
((op-set signs "+"))
((op-set signs "-"))

((/# this procedure links list x and list y to form z which is (x y) ))
((/# i.e. ?((append (1 2 3) (a b) (1 2 3 a b))) will succeed         ))
((append () X X))
((append (X|Y) Z (X|x))
  (append Y Z x))

((/# this procedure splits the given list x1 into y1 and y2 around ))
((/# the given operator's set x2 if an operator of x2 is included  ))
((/# in the list. ))
((/# i.e. ?((split (1 + 2) add-op (1) (2) y3)) will succeed ))
((split x1 x2 y1 y2 z)
  (op-set x2 z)
  (append y1 (z|y2) x1))
((split x1 x2 y1 y2 z)
  (NOT EQ z ())
  (split x1 x2 y1 y2 z))

((/# this procedure replies whether a given list is a valid arithmetic and ))
((/# logic expression ))
((parse x)
  (exp x)
  (P x)(P " Valid")(PP))
((parse x)
  (P x)(P " Invalid")(PP))

((/# this procedure checks whether the given list is an expression ))
((exp x)
  (simple-exp x))
((exp x)
  (split x rel-op y1 y2 y3)
  (simple-exp y1)
  (simple-exp y2))

((this procedure checks whether the given list is a simple expression ))
((simple-exp x)
  (term x))
((simple-exp (x1|x2))
  (op-set signs x1)
  (term x2))
((simple-exp x)
  (split x add-op y1 y2 y3)
  (term y1)
  (simple-exp y2))

((/# this operator checks whether the given list is a term ))
((term x)
  (factor x))
((term x)
  (split x mul-op y1 y2 y3)
  (factor y1)
  (term y2))

((/# this procedure checks wether the given list is a factor ))
((factor (x1))
  (INT x1))
((factor (x1))
  (CON x1)
  (NOT op-set z x1)
  (NOT EQ x1 not))
((factor (x1|x2))
  (EQ x1 not)
  (factor x2))
((factor (x1|x2))
  (LST x1)
  (EQ x2 ())
  (exp x1))
